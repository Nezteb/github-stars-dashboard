{"version":3,"file":"get_stars_json.js","sourceRoot":"","sources":["get_stars_json.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { format } from 'date-fns'\nimport pick from 'lodash/pick';\nimport omit from 'lodash/omit';\nimport {\n    readFile as readFileCallback,\n    writeFileSync\n} from 'fs';\nimport { promisify } from 'util';\nconst readFile = promisify(readFileCallback);\n\nconst fileName = \"stars.json\"\n\nconst starsKeys = [\n    \"starred_at\",\n    \"repo.id\",\n    \"repo.name\",\n    \"repo.owner.login\",\n    \"repo.html_url\",\n    \"repo.homepage\",\n    \"repo.description\",\n    \"repo.stargazers_count\",\n    \"repo.language\",\n]\n\nconst perPage = 50\n\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\n\nconst getStars = async (githubToken: string, page: number): Promise<any> => {\n    return await axios({\n        method: \"get\",\n        url: `https://api.github.com/user/starred?per_page=${perPage}&page=${page}`,\n        headers: {\n            Authorization: `Bearer ${githubToken}`,\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/vnd.github.v3.star+json\"\n        }\n    })\n}\n\n// owner: string, repo: string\nconst getRepoTopics = async (githubToken: string, star: any): Promise<any> => {\n    return await axios({\n        method: \"get\",\n        url: `https://api.github.com/repositories/${star.repo.id}/topics`,\n        headers: {\n            Authorization: `Bearer ${githubToken}`,\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/vnd.github.mercy-preview+json\",\n        }\n    })\n}\n\nconst getOneStar = async (githubToken: string, fullStar: any) => {\n    let star = pick(fullStar, starsKeys)\n\n    star.fullname = `${star.repo.owner.login}/${star.repo.name}`\n\n    const date = new Date(star.starred_at)\n    const starredAtStr = format(date, \"MMMM do yyyy\")\n    star.starred_at_str = starredAtStr\n\n    try {\n        const { data: labelsListObj } = await getRepoTopics(githubToken, star)\n        const { names: labelsList } = labelsListObj\n        const labels = labelsList.join(\", \")\n        star.labels = labels\n    } catch (error: any) {\n        console.error(`ERROR: ${star.fullname}, ${error.response.status}, ${error.response.statusText}, ${error.response.data}`);\n        star.labels = null\n    }\n\n    star = omit(star, [\"repo.id\", \"repo.owner\", \"repo.name\"])\n\n    // Hack to unnest the \"repo\" object\n    const repo = star.repo\n    star = omit(star, \"repo\")\n    return { ...star, ...repo }\n}\n\nconst sort_by_starred_at = (a: any, b: any) => {\n    // Newest first\n    return new Date(b.starred_at).getTime() - new Date(a.starred_at).getTime();\n}\n\n(async function () {\n    console.log(`Starting...`)\n    const githubToken = process.env.GITHUB_TOKEN!\n    let page = 1\n    let total = 0\n    writeFileSync(fileName, JSON.stringify([], null, 2), 'utf-8');\n\n    while (total < 2000) {\n        console.log(`Getting stars page: ${page} (total: ${total})`)\n\n        let starsListForPage = []\n        try {\n            const { data } = await getStars(githubToken, page)\n            starsListForPage = data\n        } catch (error: any) {\n            console.error(error.response.status, error.response.statusText, error.response.data);\n            break;\n        }\n\n        const allStarsForPage = await Promise.all(starsListForPage.map((star: any) => {\n            return getOneStar(githubToken, star)\n        }))\n        total += allStarsForPage.length\n\n        if (allStarsForPage === undefined || allStarsForPage.length < 1) {\n            break\n        }\n        const fileContent = await readFile(fileName, 'utf-8')\n        const fileJson = JSON.parse(fileContent);\n        fileJson.push(...allStarsForPage)\n        writeFileSync(fileName, JSON.stringify(fileJson, null, 2), 'utf-8')\n        page++\n\n        console.log(\"Sleeping for 5 seconds to avoid triggering GitHub abuse detection...\")\n        await delay(5000);\n    }\n\n    console.log(\"Sorting...\")\n    const fileContent = await readFile(fileName, 'utf-8')\n    const fileJson = JSON.parse(fileContent);\n    fileJson.sort(sort_by_starred_at);\n    writeFileSync(fileName, JSON.stringify(fileJson, null, 2), 'utf-8')\n})();\n"]}