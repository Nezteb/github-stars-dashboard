{"version":3,"file":"index.5a25f8cd.js","sources":["../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["// @ts-nocheck\n// TODO: REMOVE THIS NO CHECK AND ACTUALLY USE TYPES...\n\nimport React, { useMemo, useState } from 'react'\nimport {\n  useBlockLayout,\n  usePagination,\n  useResizeColumns,\n  useSortBy,\n  useTable,\n  useFilters,\n  useGlobalFilter,\n  useAsyncDebounce\n} from 'react-table'\nimport styled from 'styled-components'\nimport { matchSorter } from 'match-sorter'\nimport stars from '../scripts/stars.json';\nimport \"regenerator-runtime/runtime.js\";\n\ntype Star = {\n  starred_at: string,\n  fullname: string,\n  html_url: string,\n  stargazers_count: number,\n  labels: string | null,\n  homepage: string | null,\n  description: string | null,\n  language: string | null\n}\n\nfunction App() {\n  const data = useMemo((): Star[] => stars, []);\n\n  const columns = useMemo(() => [\n    {\n      Header: \"Name\",\n      accessor: \"fullname\",\n      filter: 'fuzzyText'\n    },\n    {\n      Header: \"Description\",\n      accessor: \"description\",\n      filter: 'fuzzyText'\n    },\n    {\n      Header: \"Language\",\n      accessor: \"language\",\n      filter: 'fuzzyText'\n    },\n    {\n      Header: \"Labels\",\n      accessor: \"labels\",\n      filter: 'fuzzyText'\n    },\n    {\n      Header: \"Stars\",\n      accessor: \"stargazers_count\",\n      Filter: NumberRangeColumnFilter,\n      filter: 'between',\n    },\n    {\n      Header: \"URL\",\n      accessor: \"html_url\",\n      filter: 'fuzzyText'\n    },\n    {\n      Header: \"Homepage\",\n      accessor: \"homepage\",\n      filter: 'fuzzyText'\n    },\n    {\n      Header: \"Starred At\",\n      accessor: \"starred_at\",\n      filter: 'fuzzyText'\n    }\n  ], []);\n\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows: any, id: any, filterValue: any) => {\n        return rows.filter((row: any) => {\n          const rowValue = row.values[id]\n          return rowValue !== undefined\n            ? String(rowValue)\n              .toLowerCase()\n              .startsWith(String(filterValue).toLowerCase())\n            : true\n        })\n      },\n    }),\n    []\n  )\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  )\n\n  const tableInstance: any = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      filterTypes\n    },\n    useBlockLayout,\n    useResizeColumns,\n    useFilters,\n    useGlobalFilter,\n    useSortBy,\n    usePagination\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    // Paging\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state,\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n  } = tableInstance\n\n  return (\n    <Styles>\n      {/* \n        Pagination can be built however you'd like. \n        This is just a very basic UI implementation:\n      */}\n      <span>Also on <a href=\"https://docs.google.com/spreadsheets/d/13_lRO0-ehvc4PC9jQe9iaoQVaMYVW8k98pJ8Oyy-pz0\">Google Sheets</a></span>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {state.pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={state.pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n          />\n        </span>{' '}\n        <select\n          value={state.pageSize}\n          onChange={e => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map(pageSize => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n      <p />\n      {// apply the table props\n        <table {...getTableProps()} className=\"table\">\n          <thead>\n            {// Loop over the header rows\n              headerGroups.map((headerGroup: any) => (\n                // Apply the header row props\n                <tr {...headerGroup.getHeaderGroupProps()} className=\"tr\">\n                  {// Loop over the headers in each row\n                    headerGroup.headers.map((column: any) => (\n                      // Apply the header cell props\n                      <th {...column.getHeaderProps(column.getSortByToggleProps())} className=\"th\">\n                        {// Render the header\n                          column.render('Header')}\n                        <div>{column.canFilter ? column.render('Filter') : null}</div>\n                        <span>\n                          {column.isSorted\n                            ? column.isSortedDesc\n                              ? ' (desc)'\n                              : ' (asc)'\n                            : ''}\n                        </span>\n                        <div\n                          {...column.getResizerProps()}\n                          className={`resizer ${column.isResizing ? 'isResizing' : ''}`}\n                          onClick={(e) => { e.preventDefault(); e.stopPropagation() }}\n                        />\n                      </th>\n                    ))}\n                </tr>\n              ))}\n            <tr>\n              <th\n                colSpan={visibleColumns.length}\n                style={{\n                  textAlign: 'left',\n                }}\n              >\n                <GlobalFilter\n                  preGlobalFilteredRows={preGlobalFilteredRows}\n                  globalFilter={state.globalFilter}\n                  setGlobalFilter={setGlobalFilter}\n                />\n              </th>\n            </tr>\n          </thead>\n          {/* Apply the table body props */}\n          <tbody {...getTableBodyProps()}>\n            {// Loop over the table rows\n              page.map((row: any) => {\n                // Prepare the row for display\n                prepareRow(row)\n                return (\n                  // Apply the row props\n                  <tr {...row.getRowProps()} className=\"tr\">\n                    {// Loop over the rows cells\n                      row.cells.map((cell: any) => {\n                        // Apply the cell props\n                        return (\n                          <td {...cell.getCellProps()} className=\"td\">\n                            {// Render the cell contents\n                              cell.render('Cell')}\n                          </td>\n                        )\n                      })}\n                  </tr>\n                )\n              })}\n          </tbody>\n        </table>}\n    </Styles>\n  )\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows: any, id: any, filterValue: any) {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return rowValue >= filterValue\n  })\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = val => typeof val !== 'number'\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter,\n}) {\n  const count = preGlobalFilteredRows.length\n  const [value, setValue] = React.useState(globalFilter)\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined)\n  }, 200)\n\n  return (\n    <span>\n      Search:{' '}\n      <input\n        value={value || \"\"}\n        onChange={e => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`${count} records...`}\n      />\n    </span>\n  )\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={e => {\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n      onClick={(e) => { e.preventDefault(); e.stopPropagation() }}\n    />\n  )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set()\n    preFilteredRows.forEach((row: any) => {\n      options.add(row.values[id])\n    })\n    return [...options.values()]\n  }, [id, preFilteredRows])\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={e => {\n        setFilter(e.target.value || undefined)\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  )\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({\n  column: { filterValue = [], preFilteredRows, setFilter, id },\n}: { column: any }) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    preFilteredRows.forEach((row: any) => {\n      min = Math.min(row.values[id], min)\n      max = Math.max(row.values[id], max)\n    })\n    return [min, max]\n  }, [id, preFilteredRows])\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n      }}\n    >\n      <input\n        value={filterValue[0] || ''}\n        type=\"number\"\n        onChange={e => {\n          const val = e.target.value\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\n        }}\n        placeholder={`Min (${min})`}\n        style={{\n          width: '100%',\n        }}\n        onClick={(e) => { e.preventDefault(); e.stopPropagation() }}\n      />\n      to\n      <input\n        value={filterValue[1] || ''}\n        type=\"number\"\n        onChange={e => {\n          const val = e.target.value\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\n        }}\n        placeholder={`Max (${max})`}\n        style={{\n          width: '100%',\n        }}\n        onClick={(e) => { e.preventDefault(); e.stopPropagation() }}\n      />\n    </div>\n  )\n}\n\nfunction fuzzyTextFilterFn(rows: any, id: any, filterValue: any) {\n  return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val: any) => !val\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  .table {\n    overflow: auto;\n    display: inline-block;\n    border-spacing: 0;\n    border: 1px solid black;\n\n    .tr {\n      :last-child {\n        .td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    .th,\n    .td {\n      word-break:break-all;\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      ${'' /* In this example we use an absolutely position resizer,\n       so this is required. */}\n      position: relative;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      .resizer {\n        display: inline-block;\n        background: blue;\n        width: 10px;\n        height: 100%;\n        position: absolute;\n        right: 0;\n        top: 0;\n        transform: translateX(50%);\n        z-index: 1;\n        ${'' /* prevents from scrolling while dragging on touch devices */}\n        touch-action:none;\n\n        &.isResizing {\n          background: red;\n        }\n      }\n    }\n  }\n`\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"names":["data","useMemo","stars","columns","Header","accessor","filter","Filter","NumberRangeColumnFilter","filterTypes","React","fuzzyText","fuzzyTextFilterFn","text","rows","id","filterValue","row","rowValue","values","String","toLowerCase","startsWith","defaultColumn","DefaultColumnFilter","tableInstance","useTable","useBlockLayout","useResizeColumns","useFilters","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","visibleColumns","preGlobalFilteredRows","setGlobalFilter","Styles","href","className","onClick","disabled","pageIndex","length","type","defaultValue","onChange","page2","e","target","value","Number","pageSize","map","key","__spreadProps","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","canFilter","isSorted","isSortedDesc","getResizerProps","isResizing","preventDefault","stopPropagation","colSpan","style","textAlign","GlobalFilter","globalFilter","__spreadValues","getRowProps","cells","cell","getCellProps","count","setValue","useState","useAsyncDebounce","value2","placeholder","preFilteredRows","setFilter","min","max","min2","max2","forEach","Math","display","val","old","parseInt","width","matchSorter","keys","autoRemove","styled","div","ReactDOM","StrictMode","App","document","getElementById"],"mappings":"mox+BA8BA,mBACQA,EAAOC,mBAAQ,IAAcC,GAAO,IAEpCC,EAAUF,mBAAQ,IAAM,CAC5B,CACEG,OAAQ,OACRC,SAAU,WACVC,OAAQ,aAEV,CACEF,OAAQ,cACRC,SAAU,cACVC,OAAQ,aAEV,CACEF,OAAQ,WACRC,SAAU,WACVC,OAAQ,aAEV,CACEF,OAAQ,SACRC,SAAU,SACVC,OAAQ,aAEV,CACEF,OAAQ,QACRC,SAAU,mBACVE,OAAQC,EACRF,OAAQ,WAEV,CACEF,OAAQ,MACRC,SAAU,WACVC,OAAQ,aAEV,CACEF,OAAQ,WACRC,SAAU,WACVC,OAAQ,aAEV,CACEF,OAAQ,aACRC,SAAU,aACVC,OAAQ,eAET,IAEGG,EAAcC,EAAMT,SACxB,MAEEU,UAAWC,EAGXC,KAAM,CAACC,EAAWC,EAASC,IAClBF,EAAKR,QAAQW,UACZC,EAAWD,EAAIE,OAAOJ,eACR,IAAbG,GACHE,OAAOF,GACNG,cACAC,WAAWF,OAAOJ,GAAaK,qBAK1C,IAGIE,EAAgBb,EAAMT,SAC1B,MAEEM,OAAQiB,KAEV,IAGIC,EAAqBC,mBACzB,CACEvB,QAAAA,EACAH,KAAAA,EACAuB,cAAAA,EACAd,YAAAA,GAEFkB,yBACAC,2BACAC,qBACAC,0BACAC,oBACAC,0BAGIC,cACJA,oBACAC,eACAC,aACAC,OAEAC,kBACAC,cACAC,cACAC,YACAC,WACAC,WACAC,eACAC,cACAC,QACAC,iBACAC,wBACAC,kBACAC,GACExB,yBAGDyB,EAAD,qBAKG,OAAD,KAAM,2BAAS,IAAD,CAAGC,KAAK,uFAAsF,kCAC3G,MAAD,CAAKC,UAAU,8BACZ,SAAD,CAAQC,QAAS,IAAMX,EAAS,GAAIY,UAAWhB,GAC5C,MACO,oBACT,SAAD,CAAQe,QAAS,IAAMT,IAAgBU,UAAWhB,GAC/C,KACO,oBACT,SAAD,CAAQe,QAAS,IAAMV,IAAYW,UAAWf,GAC3C,KACO,oBACT,SAAD,CAAQc,QAAS,IAAMX,EAASD,EAAY,GAAIa,UAAWf,GACxD,MACO,oBACT,OAAD,KAAM,OACC,oBACJ,SAAD,KACGO,EAAMS,UAAY,EAAE,OAAKf,EAAYgB,QAC9B,qBAEX,OAAD,KAAM,gBACU,oBACb,QAAD,CACEC,KAAK,SACLC,aAAcZ,EAAMS,UAAY,EAChCI,mBACQC,EAAOC,EAAEC,OAAOC,MAAQC,OAAOH,EAAEC,OAAOC,OAAS,EAAI,IAClDH,OAGP,oBACP,SAAD,CACEG,MAAOjB,EAAMmB,SACbN,eACcK,OAAOH,EAAEC,OAAOC,UAG7B,CAAC,GAAI,GAAI,GAAI,GAAI,IAAIG,wBACnB,SAAD,CAAQC,IAAKF,EAAUF,MAAOE,GAAU,QAChCA,uBAKb,IAAD,sBAEG,QAADG,OAAWnC,KAAX,CAA4BmB,UAAU,0BACnC,QAAD,KAEIjB,EAAa+B,KAAKG,mBAEf,KAADD,OAAQC,EAAYC,uBAApB,CAA2ClB,UAAU,OAEjDiB,EAAYE,QAAQL,KAAKM,mBAEtB,KAADJ,OAAQI,EAAOC,eAAeD,EAAOE,yBAArC,CAA8DtB,UAAU,OAEpEoB,EAAOG,OAAO,0BACf,MAAD,KAAMH,EAAOI,UAAYJ,EAAOG,OAAO,UAAY,sBAClD,OAAD,KACGH,EAAOK,SACJL,EAAOM,aACL,UACA,SACF,oBAEL,MAADV,OACMI,EAAOO,mBADb,CAEE3B,UAAW,YAAWoB,EAAOQ,WAAa,aAAe,IACzD3B,QAAUQ,MAAUoB,mBAAoBC,4CAMrD,KAAD,qBACG,KAAD,CACEC,QAASpC,EAAeS,OACxB4B,MAAO,CACLC,UAAW,yBAGZC,EAAD,CACEtC,sBAAAA,EACAuC,aAAczC,EAAMyC,aACpBtC,gBAAAA,uBAMP,QAADuC,KAAWtD,KAEPG,EAAK6B,KAAKjD,MAEGA,mBAGR,KAADmD,OAAQnD,EAAIwE,eAAZ,CAA2BrC,UAAU,OAEjCnC,EAAIyE,MAAMxB,KAAKyB,mBAGV,KAADvB,OAAQuB,EAAKC,gBAAb,CAA6BxC,UAAU,OAEnCuC,EAAKhB,OAAO,kBA4B1C,YAAsB3B,sBACpBA,eACAuC,kBACAtC,UAEM4C,EAAQ7C,EAAsBQ,QAC7BO,EAAO+B,GAAYpF,EAAMqF,SAASR,GACnC5B,EAAWqC,kCACCC,QAAS,KACxB,4BAGA,OAAD,KAAM,UACI,oBACP,QAAD,CACElC,MAAOA,GAAS,GAChBJ,eACWE,EAAEC,OAAOC,SACTF,EAAEC,OAAOC,QAEpBmC,YAAa,GAAGL,kBAOxB,YACErB,QAAQxD,YAAEA,kBAAamF,YAAiBC,WAElCP,EAAQM,EAAgB3C,8BAG3B,QAAD,CACEO,MAAO/C,GAAe,GACtB2C,eACYE,EAAEC,OAAOC,YAAS,IAE9BmC,YAAa,UAAUL,eACvBxC,QAAUQ,MAAUoB,mBAAoBC,qBAyC9C,YACEV,QAAQxD,YAAEA,EAAc,mBAAImF,YAAiBC,KAAWrF,WAEjDsF,EAAKC,GAAO5F,EAAMT,SAAQ,SAC3BsG,EAAMJ,EAAgB3C,OAAS2C,EAAgB,GAAGhF,OAAOJ,GAAM,EAC/DyF,EAAML,EAAgB3C,OAAS2C,EAAgB,GAAGhF,OAAOJ,GAAM,WACnD0F,SAASxF,MACjByF,KAAKL,IAAIpF,EAAIE,OAAOJ,GAAKwF,KACzBG,KAAKJ,IAAIrF,EAAIE,OAAOJ,GAAKyF,MAE1B,CAACD,EAAKC,KACZ,CAACzF,EAAIoF,2BAGL,MAAD,CACEf,MAAO,CACLuB,QAAS,yBAGV,QAAD,CACE5C,MAAO/C,EAAY,IAAM,GACzByC,KAAK,SACLE,mBACQiD,EAAM/C,EAAEC,OAAOC,SACX,CAAC8C,EAAM,KAAO,CAACD,EAAME,SAASF,EAAK,SAAM,EAAWC,EAAI,OAEpEX,YAAa,QAAQG,KACrBjB,MAAO,CACL2B,MAAO,QAET1D,QAAUQ,MAAUoB,mBAAoBC,qBACxC,qBAED,QAAD,CACEnB,MAAO/C,EAAY,IAAM,GACzByC,KAAK,SACLE,mBACQiD,EAAM/C,EAAEC,OAAOC,SACX,CAAC8C,EAAM,KAAO,CAACA,EAAI,GAAID,EAAME,SAASF,EAAK,SAAM,MAE7DV,YAAa,QAAQI,KACrBlB,MAAO,CACL2B,MAAO,QAET1D,QAAUQ,MAAUoB,mBAAoBC,sBAMhD,WAA2BpE,EAAWC,EAASC,UACtCgG,EAAYlG,EAAME,EAAa,CAAEiG,KAAM,IAAQhG,EAAIE,OAAOJ,MAInEH,EAAkBsG,WAAcN,IAAcA,EAE9C,MAAM1D,EAASiE,EAAOC;;;;;;;;;;;;;;;;;;;;;;;;;QAyBd;;;;;;;;;;;;;;;;;UAkBE;;;;;;;;;ECvcVC,EAAS1C,uBACNjE,EAAM4G,WAAP,qBACGC,EAAD,OAEFC,SAASC,eAAe"}